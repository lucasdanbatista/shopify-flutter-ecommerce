### Schema ###

schema {
    query: Query

    mutation: Mutation
}

type Mutation {
    customerCreate(input: CustomerCreateInput!): CustomerCreatePayload!

    customerAccessTokenCreate(input: CustomerAccessTokenCreateInput!): CustomerAccessTokenCreatePayload!

    cartCreate(input: CartCreateInput!): CartCreatePayload!

    cartLinesAdd(cartId: ID!, lines: [CartLineInput!]!): CartLinesPayload!

    cartLinesUpdate(cartId: ID!, lines: [CartLineInput!]!): CartLinesPayload!

    checkoutCreate(input: CreateCheckoutInput!): CheckoutCreatePayload!
}

type Query {
    productTags(first: Int!): StringConnection!

    products(query: String!, first: Int!): ProductConnection!

    product(id: ID!): Product!

    cart(id: ID!): Cart!
}

### Models ###

type Product {
    id: String!

    title: String!

    description: String!

    images(first: Int!): ImageConnection!

    variants(first: Int!): ProductVariantConnection!
}

scalar Decimal

type MoneyV2 {
    amount: Decimal!
}

type ProductVariant {
    id: ID!

    compareAtPrice: MoneyV2!

    price: MoneyV2!

    image: Image!

    product: Product!
}

type ProductVariantConnection {
    nodes: [ProductVariant!]!
}

type ProductConnection {
    nodes: [Product!]!
}

type Cost {
    subtotalAmount: MoneyV2!

    totalAmount: MoneyV2!
}

union Merchandise = ProductVariant

type BaseCartLine {
    id: ID!

    quantity: Int!

    cost: Cost!

    merchandise: Merchandise!
}

type BaseCartLineConnection {
    nodes: [BaseCartLine!]!
}

type Customer {
    id: ID!
}

type CustomerAccessToken {
    accessToken: String!
}

type StringEdge {
    node: String!
}

type StringConnection {
    edges: [StringEdge!]!
}

type Image {
    url: String!
}

type ImageConnection {
    nodes: [Image!]!
}

type Cart {
    id: ID!
    lines(first: Int!): BaseCartLineConnection!
    cost: Cost!
}

### Inputs ###

input CheckoutLineItemInput {
    variantId: ID!

    quantity: Int!
}

input CreateCheckoutInput {
    shippingAddress: MailingAddressInput!

    lineItems: [CheckoutLineItemInput!]!
}

input MailingAddressInput {
    firstName: String!
    lastName: String!
    address1: String!
    address2: String!
    city: String!
    province: String!
    zip: String!
    country: String!
}

input BuyerIdentityInput {
    customerAccessToken: String!
}

input CartCreateInput {
    buyerIdentity: BuyerIdentityInput!
}

input CartLineInput {
    id: ID

    merchandiseId: ID

    quantity: Int!
}

input CustomerCreateInput {
    firstName: String!

    lastName: String!

    email: String!

    password: String!
}

input CustomerAccessTokenCreateInput {
    email: String!

    password: String!
}

type Checkout {
    id: ID!

    totalPrice: MoneyV2!
}

### Payloads ###

type CheckoutCreatePayload {
    checkout: Checkout!
}

type CartCreatePayload {
    cart: Cart!
}

type CustomerCreatePayload {
    customer: Customer!
}

type CustomerAccessTokenCreatePayload {
    customerAccessToken: CustomerAccessToken!
}

type CartLinesPayload {
    cart: Cart!
}
